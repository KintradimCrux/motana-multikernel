Motana Multi-Kernel App Console - Symfony `{{ kernel_version }}` (kernel: {{ kernel_name }}, env: test, debug: false)
========================================================================================

Commands
--------

* about
* help
* list

**assets:**

* assets:install

**cache:**

* cache:clear
* cache:pool:clear
* cache:pool:prune
* cache:warmup

**config:**

* config:dump-reference

**debug:**

* debug:autowiring
* debug:config
* debug:container
* debug:event-dispatcher
* debug:form
* debug:router
* debug:twig

**lint:**

* lint:twig
* lint:xliff
* lint:yaml

**multikernel:**

* multikernel:convert

**router:**

* router:match

**security:**

* security:encode-password

Command "about"
---------------

* Description: Displays information about the current project
* Usage:

  * `./bin/console {{ kernel_name }} about [options]`

The `about` command displays information about the current Symfony project.

The `PHP` section displays important configuration that could affect your application. The values might
be different between web and CLI.

The `Environment` section displays the current environment variables managed by Symfony Dotenv. It will not
be shown if no variables were found. The values might be different between web and CLI.

### Options:

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "help"
--------------

* Description: Displays help for a command
* Usage:

  * `./bin/console {{ kernel_name }} help [options] [--] [<command_name>]`
  * `./bin/console {{ kernel_name }} help:help`

The `help` command displays help for a given command:

  `./bin/console help list`

You can also output the help in other formats by using the --format option:

  `./bin/console help --format=xml list`

To display the list of available commands, please use the `list` command.

### Arguments:

**command_name:**

* Name: command_name
* Is required: no
* Is array: no
* Description: The command name
* Default: `'help'`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format (txt, xml, json, or md)
* Default: `'txt'`

**raw:**

* Name: `--raw`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: To output raw command help
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "list"
--------------

* Description: Lists commands
* Usage:

  * `./bin/console {{ kernel_name }} list [options] [--] [<namespace>]`

The `list` command lists all commands:

  `./bin/console list`

You can also display the commands for a specific namespace:

  `./bin/console list test`

You can also output the information in other formats by using the --format option:

  `./bin/console list --format=xml`

It's also possible to get raw list of commands (useful for embedding command runner):

  `./bin/console list --raw`

### Arguments:

**namespace:**

* Name: namespace
* Is required: no
* Is array: no
* Description: The namespace name
* Default: `NULL`

### Options:

**raw:**

* Name: `--raw`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: To output raw command list
* Default: `false`

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format (txt, xml, json, or md)
* Default: `'txt'`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "assets:install"
------------------------

* Description: Installs bundles web assets under a public directory
* Usage:

  * `./bin/console {{ kernel_name }} assets:install [options] [--] [<target>]`

The `assets:install` command installs bundle assets into a given
directory (e.g. the public directory).

  `./bin/console assets:install public`

A "bundles" directory will be created inside the target directory and the
"Resources/public" directory of each bundle will be copied into it.

To create a symlink to each bundle instead of copying its assets, use the
`--symlink` option (will fall back to hard copies when symbolic links aren't possible:

  `./bin/console assets:install public --symlink`

To make symlink relative, add the `--relative` option:

  `./bin/console assets:install public --symlink --relative`

### Arguments:

**target:**

* Name: target
* Is required: no
* Is array: no
* Description: The target directory
* Default: `'public'`

### Options:

**symlink:**

* Name: `--symlink`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Symlinks the assets instead of copying it
* Default: `false`

**relative:**

* Name: `--relative`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Make relative symlinks
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "cache:clear"
---------------------

* Description: Clears the cache
* Usage:

  * `./bin/console {{ kernel_name }} cache:clear [options]`

The `cache:clear` command clears the application cache for a given environment
and debug mode:

  `./bin/console cache:clear --env=dev`
  `./bin/console cache:clear --env=prod --no-debug`

### Options:

**no-warmup:**

* Name: `--no-warmup`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not warm up the cache
* Default: `false`

**no-optional-warmers:**

* Name: `--no-optional-warmers`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Skip optional cache warmers (faster)
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "cache:pool:clear"
--------------------------

* Description: Clears cache pools
* Usage:

  * `./bin/console {{ kernel_name }} cache:pool:clear [options] [--] <pools> (<pools>)...`

The `cache:pool:clear` command clears the given cache pools or cache pool clearers.

    bin/console cache:pool:clear  [...]

### Arguments:

**pools:**

* Name: pools
* Is required: yes
* Is array: yes
* Description: A list of cache pools or cache pool clearers
* Default: `array ()`

### Options:

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "cache:pool:prune"
--------------------------

* Description: Prune cache pools
* Usage:

  * `./bin/console {{ kernel_name }} cache:pool:prune [options]`

The `cache:pool:prune` command deletes all expired items from all pruneable pools.

    bin/console cache:pool:prune

### Options:

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "cache:warmup"
----------------------

* Description: Warms up an empty cache
* Usage:

  * `./bin/console {{ kernel_name }} cache:warmup [options]`

The `cache:warmup` command warms up the cache.

Before running this command, the cache must be empty.

This command does not generate the classes cache (as when executing this
command, too many classes that should be part of the cache are already loaded
in memory). Use curl or any other similar tool to warm up
the classes cache if you want.

### Options:

**no-optional-warmers:**

* Name: `--no-optional-warmers`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Skip optional cache warmers (faster)
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "config:dump-reference"
-------------------------------

* Description: Dumps the default configuration for an extension
* Usage:

  * `./bin/console {{ kernel_name }} config:dump-reference [options] [--] [<name>] [<path>]`

The `config:dump-reference` command dumps the default configuration for an
extension/bundle.

Either the extension alias or bundle name can be used:

  `./bin/console config:dump-reference framework`
  `./bin/console config:dump-reference FrameworkBundle`

With the `--format` option specifies the format of the configuration,
this is either yaml or xml.
When the option is not provided, yaml is used.

  `./bin/console config:dump-reference FrameworkBundle --format=xml`

For dumping a specific option, add its path as second argument (only available for the yaml format):

  `./bin/console config:dump-reference framework profiler.matcher`

### Arguments:

**name:**

* Name: name
* Is required: no
* Is array: no
* Description: The Bundle name or the extension alias
* Default: `NULL`

**path:**

* Name: path
* Is required: no
* Is array: no
* Description: The configuration option path
* Default: `NULL`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format (yaml or xml)
* Default: `'yaml'`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "debug:autowiring"
--------------------------

* Description: Lists classes/interfaces you can use for autowiring
* Usage:

  * `./bin/console {{ kernel_name }} debug:autowiring [options] [--] [<search>]`

The `debug:autowiring` command displays all classes and interfaces that
you can use as type-hints for autowiring:

  `./bin/console debug:autowiring`

You can also pass a search term to filter the list:

  `./bin/console debug:autowiring log`

### Arguments:

**search:**

* Name: search
* Is required: no
* Is array: no
* Description: A search filter
* Default: `NULL`

### Options:

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "debug:config"
----------------------

* Description: Dumps the current configuration for an extension
* Usage:

  * `./bin/console {{ kernel_name }} debug:config [options] [--] [<name>] [<path>]`

The `debug:config` command dumps the current configuration for an
extension/bundle.

Either the extension alias or bundle name can be used:

  `./bin/console debug:config framework`
  `./bin/console debug:config FrameworkBundle`

For dumping a specific option, add its path as second argument:

  `./bin/console debug:config framework serializer.enabled`

### Arguments:

**name:**

* Name: name
* Is required: no
* Is array: no
* Description: The bundle name or the extension alias
* Default: `NULL`

**path:**

* Name: path
* Is required: no
* Is array: no
* Description: The configuration option path
* Default: `NULL`

### Options:

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "debug:container"
-------------------------

* Description: Displays current services for an application
* Usage:

  * `./bin/console {{ kernel_name }} debug:container [options] [--] [<name>]`

The `debug:container` command displays all configured public services:

  `./bin/console debug:container`

To get specific information about a service, specify its name:

  `./bin/console debug:container validator`

To see available types that can be used for autowiring, use the `--types` flag:

  `./bin/console debug:container --types`

By default, private services are hidden. You can display all services by
using the `--show-private` flag:

  `./bin/console debug:container --show-private`

Use the --tags option to display tagged public services grouped by tag:

  `./bin/console debug:container --tags`

Find all services with a specific tag by specifying the tag name with the `--tag` option:

  `./bin/console debug:container --tag=form.type`

Use the `--parameters` option to display all parameters:

  `./bin/console debug:container --parameters`

Display a specific parameter by specifying its name with the `--parameter` option:

  `./bin/console debug:container --parameter=kernel.debug`

### Arguments:

**name:**

* Name: name
* Is required: no
* Is array: no
* Description: A service name (foo)
* Default: `NULL`

### Options:

**show-private:**

* Name: `--show-private`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Used to show public *and* private services
* Default: `false`

**show-arguments:**

* Name: `--show-arguments`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Used to show arguments in services
* Default: `false`

**tag:**

* Name: `--tag`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: Shows all services with a specific tag
* Default: `NULL`

**tags:**

* Name: `--tags`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Displays tagged services for an application
* Default: `false`

**parameter:**

* Name: `--parameter`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: Displays a specific parameter for an application
* Default: `NULL`

**parameters:**

* Name: `--parameters`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Displays parameters for an application
* Default: `false`

**types:**

* Name: `--types`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Displays types (classes/interfaces) available in the container
* Default: `false`

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format (txt, xml, json, or md)
* Default: `'txt'`

**raw:**

* Name: `--raw`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: To output raw description
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "debug:event-dispatcher"
--------------------------------

* Description: Displays configured listeners for an application
* Usage:

  * `./bin/console {{ kernel_name }} debug:event-dispatcher [options] [--] [<event>]`

The `debug:event-dispatcher` command displays all configured listeners:

  `./bin/console debug:event-dispatcher`

To get specific listeners for an event, specify its name:

  `./bin/console debug:event-dispatcher kernel.request`

### Arguments:

**event:**

* Name: event
* Is required: no
* Is array: no
* Description: An event name
* Default: `NULL`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format  (txt, xml, json, or md)
* Default: `'txt'`

**raw:**

* Name: `--raw`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: To output raw description
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "debug:form"
--------------------

* Description: Displays form type information
* Usage:

  * `./bin/console {{ kernel_name }} debug:form [options] [--] [<class>] [<option>]`

The `debug:form` command displays information about form types.

  `./bin/console debug:form`

The command lists all built-in types, services types, type extensions and guessers currently available.

  `./bin/console debug:form Symfony\Component\Form\Extension\Core\Type\ChoiceType`
  `./bin/console debug:form ChoiceType`

The command lists all defined options that contains the given form type, as well as their parents and type extensions.

  `./bin/console debug:form ChoiceType choice_value`

The command displays the definition of the given option name.

  `./bin/console debug:form --format=json`

The command lists everything in a machine readable json format.

### Arguments:

**class:**

* Name: class
* Is required: no
* Is array: no
* Description: The form type class
* Default: `NULL`

**option:**

* Name: option
* Is required: no
* Is array: no
* Description: The form type option
* Default: `NULL`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format (txt or json)
* Default: `'txt'`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "debug:router"
----------------------

* Description: Displays current routes for an application
* Usage:

  * `./bin/console {{ kernel_name }} debug:router [options] [--] [<name>]`

The `debug:router` displays the configured routes:

  `./bin/console debug:router`

### Arguments:

**name:**

* Name: name
* Is required: no
* Is array: no
* Description: A route name
* Default: `NULL`

### Options:

**show-controllers:**

* Name: `--show-controllers`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Show assigned controllers in overview
* Default: `false`

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format (txt, xml, json, or md)
* Default: `'txt'`

**raw:**

* Name: `--raw`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: To output raw route(s)
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "debug:twig"
--------------------

* Description: Shows a list of twig functions, filters, globals and tests
* Usage:

  * `./bin/console {{ kernel_name }} debug:twig [options] [--] [<filter>]`

The `debug:twig` command outputs a list of twig functions,
filters, globals and tests. Output can be filtered with an optional argument.

  `./bin/console debug:twig`

The command lists all functions, filters, etc.

  `./bin/console debug:twig date`

The command lists everything that contains the word date.

  `./bin/console debug:twig --format=json`

The command lists everything in a machine readable json format.

### Arguments:

**filter:**

* Name: filter
* Is required: no
* Is array: no
* Description: Show details for all entries matching this filter
* Default: `NULL`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format (text or json)
* Default: `'text'`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "lint:twig"
-------------------

* Description: Lints a template and outputs encountered errors
* Usage:

  * `./bin/console {{ kernel_name }} lint:twig [options] [--] [<filename>]...`

The `lint:twig` command lints a template and outputs to STDOUT
the first encountered syntax error.

You can validate the syntax of contents passed from STDIN:

  `cat filename | ./bin/console lint:twig`

Or the syntax of a file:

  `./bin/console lint:twig filename`

Or of a whole directory:

  `./bin/console lint:twig dirname`
  `./bin/console lint:twig dirname --format=json`

Or all template files in a bundle:

  `./bin/console lint:twig @AcmeDemoBundle`

### Arguments:

**filename:**

* Name: filename
* Is required: no
* Is array: yes
* Description: <none>
* Default: `array ()`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format
* Default: `'txt'`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "lint:xliff"
--------------------

* Description: Lints a XLIFF file and outputs encountered errors
* Usage:

  * `./bin/console {{ kernel_name }} lint:xliff [options] [--] [<filename>]`

The `lint:xliff` command lints a XLIFF file and outputs to STDOUT
the first encountered syntax error.

You can validates XLIFF contents passed from STDIN:

  `cat filename | ./bin/console lint:xliff`

You can also validate the syntax of a file:

  `./bin/console lint:xliff filename`

Or of a whole directory:

  `./bin/console lint:xliff dirname`
  `./bin/console lint:xliff dirname --format=json`

Or find all files in a bundle:

  `./bin/console lint:xliff @AcmeDemoBundle`

### Arguments:

**filename:**

* Name: filename
* Is required: no
* Is array: no
* Description: A file or a directory or STDIN
* Default: `NULL`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format
* Default: `'txt'`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "lint:yaml"
-------------------

* Description: Lints a file and outputs encountered errors
* Usage:

  * `./bin/console {{ kernel_name }} lint:yaml [options] [--] [<filename>]`

The `lint:yaml` command lints a YAML file and outputs to STDOUT
the first encountered syntax error.

You can validates YAML contents passed from STDIN:

  `cat filename | ./bin/console lint:yaml`

You can also validate the syntax of a file:

  `./bin/console lint:yaml filename`

Or of a whole directory:

  `./bin/console lint:yaml dirname`
  `./bin/console lint:yaml dirname --format=json`

Or find all files in a bundle:

  `./bin/console lint:yaml @AcmeDemoBundle`

### Arguments:

**filename:**

* Name: filename
* Is required: no
* Is array: no
* Description: A file or a directory or STDIN
* Default: `NULL`

### Options:

**format:**

* Name: `--format`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The output format
* Default: `'txt'`

**parse-tags:**

* Name: `--parse-tags`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Parse custom tags
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "multikernel:convert"
-----------------------------

* Description: Converts a project to a multikernel project
* Usage:


The `multikernel:convert` command changes the filesystem
structure of a Symfony Standard Edition project to a multikernel project.

The command is only available on a regular app kernel and is disabled
after conversion.

To convert your project to a multikernel project, run:

  `./bin/console multikernel:convert`

After converting the project filesystem structure, run:

  `composer dump-autoload`
  `composer symfony-scripts`

### Options:

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "router:match"
----------------------

* Description: Helps debug routes by simulating a path info match
* Usage:

  * `./bin/console {{ kernel_name }} router:match [options] [--] <path_info>`

The `router:match` shows which routes match a given request and which don't and for what reason:

  `./bin/console router:match /foo`

or

  `./bin/console router:match /foo --method POST --scheme https --host symfony.com --verbose`

### Arguments:

**path_info:**

* Name: path_info
* Is required: yes
* Is array: no
* Description: A path info
* Default: `NULL`

### Options:

**method:**

* Name: `--method`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: Sets the HTTP method
* Default: `NULL`

**scheme:**

* Name: `--scheme`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: Sets the URI scheme (usually http or https)
* Default: `NULL`

**host:**

* Name: `--host`
* Shortcut: <none>
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: Sets the URI host
* Default: `NULL`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`

Command "security:encode-password"
----------------------------------

* Description: Encodes a password.
* Usage:

  * `./bin/console {{ kernel_name }} security:encode-password [options] [--] [<password>] [<user-class>]`


The `security:encode-password` command encodes passwords according to your
security configuration. This command is mainly used to generate passwords for
the in_memory user provider type and for changing passwords
in the database while developing the application.

Suppose that you have the following security configuration in your application:


# app/config/security.yml
security:
    encoders:
        Symfony\Component\Security\Core\User\User: plaintext
        AppBundle\Entity\User: bcrypt


If you execute the command non-interactively, the first available configured
user class under the security.encoders key is used and a random salt is
generated to encode the password:

  `./bin/console security:encode-password --no-interaction [password]`

Pass the full user class path as the second argument to encode passwords for
your own entities:

  `./bin/console security:encode-password --no-interaction [password] AppBundle\Entity\User`

Executing the command interactively allows you to generate a random salt for
encoding the password:

  `./bin/console security:encode-password [password] AppBundle\Entity\User`

In case your encoder doesn't require a salt, add the empty-salt option:

  `./bin/console security:encode-password --empty-salt [password] AppBundle\Entity\User`

### Arguments:

**password:**

* Name: password
* Is required: no
* Is array: no
* Description: The plain password to encode.
* Default: `NULL`

**user-class:**

* Name: user-class
* Is required: no
* Is array: no
* Description: The User entity class path associated with the encoder used to encode the password.
* Default: `NULL`

### Options:

**empty-salt:**

* Name: `--empty-salt`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not generate a salt or let the encoder generate one.
* Default: `false`

**help:**

* Name: `--help`
* Shortcut: `-h`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this help message
* Default: `false`

**quiet:**

* Name: `--quiet`
* Shortcut: `-q`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not output any message
* Default: `false`

**verbose:**

* Name: `--verbose`
* Shortcut: `-v|-vv|-vvv`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug
* Default: `false`

**version:**

* Name: `--version`
* Shortcut: `-V`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Display this application version
* Default: `false`

**ansi:**

* Name: `--ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Force ANSI output
* Default: `false`

**no-ansi:**

* Name: `--no-ansi`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Disable ANSI output
* Default: `false`

**no-interaction:**

* Name: `--no-interaction`
* Shortcut: `-n`
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Do not ask any interactive question
* Default: `false`

**env:**

* Name: `--env`
* Shortcut: `-e`
* Accepts value: yes
* Is value required: yes
* Is multiple: no
* Description: The environment name
* Default: `'test'`

**no-debug:**

* Name: `--no-debug`
* Shortcut: <none>
* Accepts value: no
* Is value required: no
* Is multiple: no
* Description: Switches off debug mode
* Default: `false`
